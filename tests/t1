#!/bin/sh

export D=$(pwd)
export PATH=$(cd ..; pwd):$PATH

git_log_graph () { 
    echo "(`pwd`)"
    git log --all --graph --decorate --date-order --pretty="format:%h %ad %ae: %s$1" | cat
    echo
}

compare_repos () {
    skip_1st_line () { awk '{ if (NR>1) print $0 }'; }
    (cd $D/r$1; git_log_graph | skip_1st_line) > $D/log-A
    (cd $D/r$2; git_log_graph | skip_1st_line) > $D/log-B
    echo
    echo "compare_repos: $1 ~ $2"
    diff -y $D/log-A $D/log-B || { echo "repo $1 and repo $2 differ!"; echo; return 1; }
    echo
}

send_updates () { # send_updates $src to $dst ...
    local src=$1
    shift; shift
    local dsts="$*"
    
    echo "send_updates: $src -> $dsts"

    old_dir=`pwd`
    cd $D/r$src

    echo
    echo "repo #$src:"
    git_log_graph %d
    echo
    
    GIT_REPLI_SENDMESSAGES="sm () { tee -a $D/sent-u$src@domain | $D/fake-send-mail \$1; }; sm " \
    GIT_REPLI_PLAIN=1 \
    GIT_REPLI_COLLABORATORS="`for u in $dsts; do echo u$u@domain; done`" \
        git-repli-send-updates

    cd $old_dir
}

read_messages () {
    local dst=$1

    echo "read_messages: $dst"

    old_dir=`pwd`
    cd $D/r$dst

    GIT_REPLI_READMESSAGES="$D/fake-read-mail u$dst@domain" \
    GIT_REPLI_PLAIN=1 \
        git-repli-read-messages

    echo
    echo "repo #$dst:"
    git_log_graph %d
    echo

    cd $old_dir
}

do_sync () {
    echo "do_sync: $1"

    old_dir=`pwd`
    cd $D/r$1

    echo
    echo "repo #$1 before sync:"
    git_log_graph %d
    echo

    GIT_REPLI_SENDMESSAGES="sm () { tee -a $D/sent-u$1@domain | $D/fake-send-mail \$1; }; sm " \
    GIT_REPLI_READMESSAGES="$D/fake-read-mail u$1@domain" \
    GIT_REPLI_PLAIN=1 \
        git-repli-sync

    echo
    echo "repo #$1 after sync:"
    git_log_graph %d
    echo

    cd $old_dir
}


date +%s > $D/commit_ts
get_next_commit_ts () {
    cat $D/commit_ts; echo $(( `cat $D/commit_ts` + 2 )) > $D/commit_ts
    #date +%s; sleep 2
}

add_commit () {
    local d=$(get_next_commit_ts)
    GIT_AUTHOR_DATE=$d GIT_COMMITTER_DATE=$d git commit -a -m "$1"
}

set -e

rm $D/sent-* || true

collabs=`seq 4`
for i in $collabs; do
    rm -rf $D/r$i || true
    mkdir -p $D/r$i
    cd $D/r$i
    git init
    git config user.name u$i
    git config user.email u$i@domain
    git-repli-set tag TAGTAGTAG
    git-repli-set collaborators "`for u in $collabs; do [ "\$u" != "$i" ] && echo u$u@domain; done`"
done

cd $D/r1

date >> d1
git add d1
add_commit ...

date >> d1
add_commit ...send

send_updates 1 to 2
read_messages 2
compare_repos 1 2

date >> d1
add_commit ...

git branch exp
git checkout exp

date >> d1
date >> d2
git add d2
add_commit ...

date >> d1
date >> d2
add_commit ...send

send_updates 1 to 2
read_messages 2
compare_repos 1 2

git checkout master

date >> d1
date >> d3
git add d3
add_commit ...

date >> d3
add_commit ...

git checkout exp

date >> d2
add_commit ...send

send_updates 1 to 2
read_messages 2
compare_repos 1 2

git-repli-set lasttimestamp 0 # this will resend everything

export GIT_REPLI_PROTECTED_REFS='mas.*'
send_updates 1 to 2
read_messages 2
compare_repos 1 2
unset GIT_REPLI_PROTECTED_REFS

date >> d3
git add d3
add_commit ...send

send_updates 2 to 3
read_messages 3
compare_repos 2 3

for i in `seq 5`; do
    do_sync 1
    do_sync 4
    compare_repos 1 4 && break || true
done
compare_repos 1 4 > /dev/null

echo test passed.
